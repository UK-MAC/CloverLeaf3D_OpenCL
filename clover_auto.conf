# Autotuning System
#
# maths.conf
#
# This configuration file performs no compilation
# it simply returns the sum of X, Y, Z, the variables
# This is a test that the system is working, but without requiring much work.



# The configuration file must contain the following sections:
# [variables], [values], [testing], [scoring], [output] 


[variables]
# Contains a single option: 'variables'
# This lists the variables which will be tuned.
# This can either be a flat list: FOO, BAR, BAZ
# or a nested list, showing independence: {FOO, {BAR1, BAR2}, {BAZ1, BAZ2}}
# This syntax is explained fully in the User's Guide.

variables = WG_X, 
            WG_Y 



[values]
# Lists the possible values each variable can take, e.g:
# FOO = 1, 2, 3
# BAR = Hello, Welcome, Hi

WG_X = 1, 2, 4, 8, 16, 32, 64, 128, 256
WG_Y = 1, 2, 4, 8, 16, 32, 64, 128, 256
#WG_X = 256
#WG_Y = 1, 3



[testing]
# Shows how to compile and run the tests.
# Any of the following commands can use %FOO%, %BAR%, etc. as placeholders for 
# the variables named FOO and BAR which are being tuned.
# %%ID%% gives a unique test ID.


# compile (optional, default: none)
# Shell command to compile a test, typically a call to 'make' or similar.

compile = bash -c "if [[ `./check_autotune_values.sh %WG_X% %WG_Y%` -eq 0 ]]; then make -s -B COMPILER=GNU MPI_COMPILER=ftn C_MPI_COMPILER=cc  CXX_MPI_COMPILER=CC OCL_VENDOR=CRAY OCL_LOCAL_WG_SIZE_XDIM=%WG_X% OCL_LOCAL_WG_SIZE_YDIM=%WG_Y% TEST_ID=%%ID%%; else echo \"Make not run values not correct multiple\"; exit 1; fi"


# test
# Shell command to run a test.

#test = [ `expr %WG_X% \* %WG_Y%` -eq 256 ]: echo %X% %Y% 
test = bash -c "if [[ `./check_autotune_values.sh %WG_X% %WG_Y%` -eq 0 ]]; then aprun -q -n 1 -N 1 ./clover_leaf; else echo \"Test not run values not correct multiple\"; exit 1; fi"
#test = bash -c "if [[ `expr %WG_X% \* %WG_Y%` -eq 256 ]]; then aprun -n 1 -N 1 hostname; else echo "20000"; fi"
#test = aprun -n 1 -N 1 hostname
#test = bash -c "if [[ `expr %WG_X% \* %WG_Y%` -eq 256 ]]; then echo "12"; else echo "20000"; fi"



# clean (optional, default: none)
# Shell command to clean up (e.g. delete) any unwanted test files.

clean = make clean



[scoring]
# Options for how tests are scored to determine which is best.


# repeat (optional, default: 1, min)
# The number of times a test should be repeated.
# Also specifies how to aggregate the results of repeated tests into one 
# overall score for the test.
# Possible aggregates are: min, max, med, avg.
# If no aggregate is specified, 'min' is used as a default.
# e.g: "repeat = 3, avg" or "repeat = 4" ('min' implied)

repeat = 3, avg


# optimal (optional, default: min_time)
# Whether the highest or lowest score is considered best.
# Can be: min_time, max_time, min, max.
# If the '_time' versions are used, the system times the execution of the 
# 'test' command above and uses that as the score. Otherwise, the score is 
# taken from the last line of output from the 'test' command.

optimal = min




[output]
# If defined, this is the name of a CSV file which a log of the tests 
# performed will be written to.
# If not defined, no log will be saved.
# This file will be overwritten!

log = clover_auto_log.csv



